id,buggy,fixed,pair,label
patch1-Time-11-Nopol2017.patch,"tailZone.iEndRecurrence.renameAppend(""-Summer""));","tailZone.iEndRecurrence.renameAppend(""-Summer""));","tailZone.iEndRecurrence.renameAppend(""-Summer""));<EOS>tailZone.iEndRecurrence.renameAppend(""-Summer""));",1
patch1-Time-12-Nopol2017.patch,if (this == partial) {,if (((this) == partial) || (!(org.joda.time.LocalDateTime.MONTH_OF_YEAR < org.joda.time.LocalDateTime.this.iLocalMillis))) {,if (this == partial) {<EOS>if (((this) == partial) || (!(org.joda.time.LocalDateTime.MONTH_OF_YEAR < org.joda.time.LocalDateTime.this.iLocalMillis))) {,1
patch1-Time-14-Nopol2017.patch,if (DateTimeUtils.isContiguous(partial)) {,if ((!(((fieldIndex) != (1)) && (valueToAdd <= values.length))) || (valueToAdd < -1)) {,if (DateTimeUtils.isContiguous(partial)) {<EOS>if ((!(((fieldIndex) != (1)) && (valueToAdd <= values.length))) || (valueToAdd < -1)) {,1
patch1-Time-19-Nopol2017.patch,} else if (offsetLocal > 0) {,} else if (org.joda.time.DateTimeZone.this.iID!=null) {,} else if (offsetLocal > 0) {<EOS>} else if (org.joda.time.DateTimeZone.this.iID!=null) {,1
patch1-Time-4-JGenProg2015-plausible.patch,return 1;,return (getWrappedField().getMaximumValue()) + 1;,return 1;<EOS>return (getWrappedField().getMaximumValue()) + 1;,1
patch2-Time-4-JGenProg2017.patch,"return getWrappedField().getMaximumValue(instant, values) + 1;",return getMaximumValue(instant);,return 1;<EOS>return getMaximumValue(instant);,1
patch3-Time-4-JGenProg2017.patch,return 1;,return getName().hashCode();,return 1;<EOS>return getName().hashCode();,1
patch-Time-4-JGenProg2017.patch,"Partial newPartial = new Partial(iChronology, newTypes, newValues);","Partial newPartial = new Partial(newTypes, newValues, iChronology);","Partial newPartial = new Partial(iChronology, newTypes, newValues);<EOS>Partial newPartial = new Partial(newTypes, newValues, iChronology);",0
patch-Time-7-JGenProg2017.patch, int defaultYear = chrono.year().get(instantLocal);,int defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis);            , int defaultYear = chrono.year().get(instantLocal);<EOS>int defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis);            ,0
patch-Time-7-JGenProg2017.patch,"int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));","int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972));","int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));<EOS>int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972));",0
patch-Time-16-JGenProg2017.patch,"instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);","instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));","instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);<EOS>instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));",0
patch-Time-19-JGenProg2017.patch, } else if (offsetLocal > 0) {,} else if (offsetLocal >= 0) {, } else if (offsetLocal > 0) {<EOS>} else if (offsetLocal >= 0) {,0
patch-Time-26-JGenProg2017.patch,"return iZone.convertLocalToUTC(localInstant, false);","return iZone.convertLocalToUTC(localInstant, false, instant);","return iZone.convertLocalToUTC(localInstant, false);<EOS>return iZone.convertLocalToUTC(localInstant, false, instant);",0