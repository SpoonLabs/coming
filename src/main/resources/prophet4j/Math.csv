id,buggy,fixed,pair,label
patch1-Math-30-CapGen.patch,final int n1n2prod = n1 * n2;,final double n1n2prod = n1 * n2;,final int n1n2prod = n1 * n2;<EOS>final double n1n2prod = n1 * n2;,0
patch1-Math-33-CapGen.patch,"if (Precision.compareTo(entry, 0d, maxUlps) > 0) {","if (Precision.compareTo(entry, 0.0, epsilon) > 0) {","if (Precision.compareTo(entry, 0d, maxUlps) > 0) {<EOS>if (Precision.compareTo(entry, 0.0, epsilon) > 0) {",0
patch1-Math-5-CapGen.patch,return NaN;,return org.apache.commons.math3.complex.Complex.INF;,return NaN;<EOS>return org.apache.commons.math3.complex.Complex.INF;,0
patch1-Math-57-CapGen.patch,int sum = 0;,double sum = 0;,int sum = 0;<EOS>double sum = 0;,0
patch1-Math-58-CapGen.patch,"return fit(new Gaussian.Parametric(), guess);",return fit( guess);,"return fit(new Gaussian.Parametric(), guess);<EOS>return fit( guess);",0
patch1-Math-59-CapGen.patch,return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);,return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);,return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);<EOS>return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);,0
patch1-Math-63-CapGen.patch,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,"return org.apache.commons.math.util.MathUtils.equals(x, y, 1);","return (Double.isNaN(x) && Double.isNaN(y)) || x == y;<EOS>return org.apache.commons.math.util.MathUtils.equals(x, y, 1);",0
patch1-Math-65-CapGen.patch,chiSquare += residual * residual / residualsWeights[i];,chiSquare += ((residualsWeights[i]) * residual) * residual;,chiSquare += residual * residual / residualsWeights[i];<EOS>chiSquare += ((residualsWeights[i]) * residual) * residual;,0
patch1-Math-70-CapGen.patch,"return solve(min, max);","return solve(f,min, max)","return solve(min, max);<EOS>return solve(f,min, max)",0
patch1-Math-75-CapGen.patch,return getCumPct((Comparable<?>) v);,return getPct((Comparable<?>) v);,return getCumPct((Comparable<?>) v);<EOS>return getPct((Comparable<?>) v);,0
patch1-Math-80-CapGen.patch,int j = 4 * n - 1;,int j = 4 * (n - 1);,int j = 4 * n - 1;<EOS>int j = 4 * (n - 1);,0
patch1-Math-85-CapGen.patch,if (fa * fb >= 0.0 ) {,if ((fa * fb) > 0.0 ) {,if (fa * fb >= 0.0 ) {<EOS>if ((fa * fb) > 0.0 ) {,0
patch1-Math-34-Elixir.patch,return chromosomes.iterator();,return getChromosomes().iterator();,return chromosomes.iterator();<EOS>return getChromosomes().iterator();,0
patch1-Math-5-Elixir.patch,return NaN;,return INF;,return NaN;<EOS>return INF;,0
patch1-Math-82-Elixir.patch,"if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {","if (MathUtils.compareTo(entry, 0, epsilon) > 0) {","if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {<EOS>if (MathUtils.compareTo(entry, 0, epsilon) > 0) {",0
patch1-Math-50-Jaid.patch,if (x == x1) {,if ((x == x1) != true && x == x1) {,if (x == x1) {<EOS>if ((x == x1) != true && x == x1) {,0
patch1-Math-32-Jaid.patch,if ((Boolean) tree.getAttribute()) {,if ((null == tree.getCut()) != false && (Boolean)tree.getAttribute()) {,if ((Boolean) tree.getAttribute()) {<EOS>if ((null == tree.getCut()) != false && (Boolean)tree.getAttribute()) {,0
patch1-Math-41-SimFix.patch,for (int i = 0; i < weights.length; i++) {,for(int i=begin;i<begin+length;i++){,for (int i = 0; i < weights.length; i++) {<EOS>for(int i=begin;i<begin+length;i++){,0
patch1-Math-50-SimFix.patch,if (x == x1) {,if (x == x0) {,if (x == x1) {<EOS>if (x == x0) {,0
patch1-Math-63-SimFix.patch,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,"return equals(x,y,1)||FastMath.abs(y-x)<=SAFE_MIN;","return (Double.isNaN(x) && Double.isNaN(y)) || x == y;<EOS>return equals(x,y,1)||FastMath.abs(y-x)<=SAFE_MIN;",0
patch1-Math-79-SimFix.patch,final int dp = p1[i] - p2[i];,final double dp = p1[i] - p2[i];,final int dp = p1[i] - p2[i];<EOS>final double dp = p1[i] - p2[i];,0
patch1-Math-98-SimFix.patch,final double[] out = new double[v.length];,final double[] out=new double[nRows];,final double[] out = new double[v.length];<EOS>final double[] out=new double[nRows];,0
patch1-Math-2-SOFix.patch,if (tmp < upper) {,if (tmp >= upper) {,if (tmp < upper) {<EOS>if (tmp >= upper) {,0
patch1-Math-80-ssFix.patch,int j = 4 * n - 1;,int j = 4 * n - 4;,int j = 4 * n - 1;<EOS>int j = 4 * n - 4;,0
patch1-Math-1-SimFix-plausible.patch,if ((p2 > overflow) || (q2 > overflow)) {,if((n<maxIterations)&&(FastMath.abs(value-value)>epsilon)){,if ((p2 > overflow) || (q2 > overflow)) {<EOS>if((n<maxIterations)&&(FastMath.abs(value-value)>epsilon)){,1
patch1-Math-104-Elixir-plausible.patch,while (Math.abs(an) > epsilon && n < maxIterations) {,while (Math.sqrt(an) > epsilon && n < maxIterations) {,while (Math.abs(an) > epsilon && n < maxIterations) {<EOS>while (Math.sqrt(an) > epsilon && n < maxIterations) {,1
patch1-Math-2-Elixir-plausible.patch,if (tmp < upper) {,if (tmp > upper) {,if (tmp < upper) {<EOS>if (tmp > upper) {,1
patch1-Math-2-JGenProg2015-plausible.patch,upper = ((int) Math.ceil(tmp)) - 1;,tmp = mu + (k * sigma);,upper = ((int) Math.ceil(tmp)) - 1;<EOS>tmp = mu + (k * sigma);,1
patch1-Math-20-Elixir-plausible.patch,"DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);","this(lambda, null, DEFAULT_CHECKFEASABLECOUNT, DEFAULT_STOPFITNESS, DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY, DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);","DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);<EOS>this(lambda, null, DEFAULT_CHECKFEASABLECOUNT, DEFAULT_STOPFITNESS, DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY, DEFAULT_CHECKFEASABLECOUNT, DEFAULT_RANDOMGENERATOR, false);",1
patch1-Math-20-JGenProg2017.patch,repaired[i] = 1.0;,valueRange = 1.0;,repaired[i] = 1.0;<EOS>valueRange = 1.0;,1
patch1-Math-20-SimFix-plausible.patch,} else if (x[i] > 1.0) {,} else if (x[i] > 0.0) {,} else if (x[i] > 1.0) {<EOS>} else if (x[i] > 0.0) {,1
patch1-Math-20-ssFix-plausible.patch,lambda = 4 + (int) (3. * Math.log(dimension));,lambda = 16000 + (int) (3. * Math.log(dimension));,lambda = 4 + (int) (3. * Math.log(dimension));<EOS>lambda = 16000 + (int) (3. * Math.log(dimension));,1
patch1-Math-28-ACS-plausible.patch,} else if (minRatioPositions.size() > 1) {,} else if (minRatioPositions.size() > 1&&!(minRatioPositions.size()>(double)0.0)) {,} else if (minRatioPositions.size() > 1) {<EOS>} else if (minRatioPositions.size() > 1&&!(minRatioPositions.size()>(double)0.0)) {,1
patch1-Math-28-DeepRepair.patch,minIndex = i;,minRow = i;,minIndex = i;<EOS>minRow = i;,1
patch1-Math-28-SimFix-plausible.patch,"if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {","if(Precision.equals(minRatio,0.0)&&row.equals(tableau.getBasicRow(column))){","if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {<EOS>if(Precision.equals(minRatio,0.0)&&row.equals(tableau.getBasicRow(column))){",1
patch1-Math-32-Elixir-plausible.patch,if ((Boolean) tree.getAttribute()) {,if ((Boolean) tree.getPlus().getAttribute()) {,if ((Boolean) tree.getAttribute()) {<EOS>if ((Boolean) tree.getPlus().getAttribute()) {,1
patch1-Math-40-JGenProg2017.patch,"System.arraycopy(x, start, x, 0, nbPoints);","java.lang.System.arraycopy(x, 1, x, 0, nbPoints);","System.arraycopy(x, start, x, 0, nbPoints);<EOS>java.lang.System.arraycopy(x, 1, x, 0, nbPoints);",1
patch1-Math-40-Nopol2017.patch,if (signChangeIndex - start >= end - signChangeIndex) {,if (((signChangeIndex - start) >= (end - signChangeIndex)) || (xA <= org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.REDUCTION_FACTOR)) {,if (signChangeIndex - start >= end - signChangeIndex) {<EOS>if (((signChangeIndex - start) >= (end - signChangeIndex)) || (xA <= org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver.REDUCTION_FACTOR)) {,1
patch1-Math-49-DeepRepair.patch,++count;,++(index);,++count;<EOS>++(index);,1
patch1-Math-49-JGenProg2015-plausible.patch,entries.remove(index);,"entries.put(index, value);","entries.remove(index);<EOS>entries.put(index, value);",1
patch1-Math-5-CapGen-plausible.patch,if (c.isNaN) {,if (this.multiply(org.apache.commons.math3.complex.Complex.I).isNaN) {,if (c.isNaN) {<EOS>if (this.multiply(org.apache.commons.math3.complex.Complex.I).isNaN) {,1
patch1-Math-5-JGenProg2017.patch,return NaN;,return org.apache.commons.math3.complex.Complex.INF;,return NaN;<EOS>return org.apache.commons.math3.complex.Complex.INF;,1
patch1-Math-50-HDRepair.patch,"x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));","x0 = 0.5 * ((int)x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));","x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));<EOS>x0 = 0.5 * ((int)x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));",1
patch1-Math-53-HDRepair.patch,"return createComplex(real + rhs.getReal(),","return createComplex(real + rhs.getArgument(),","return createComplex(real + rhs.getReal(),<EOS>return createComplex(real + rhs.getArgument(),",1
patch1-Math-6-SimFix-plausible.patch,return iterations.getCount();,return evaluations.getCount();,return iterations.getCount();<EOS>return evaluations.getCount();,1
patch1-Math-63-CapGen-plausible.patch,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,"return org.apache.commons.math.util.MathUtils.equals(x, y, 1) || x == y;","return (Double.isNaN(x) && Double.isNaN(y)) || x == y;<EOS>return org.apache.commons.math.util.MathUtils.equals(x, y, 1) || x == y;",1
patch1-Math-63-Elixir-plausible.patch,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,return (Double.isInfinite(x) && Double.isNaN(y)) || x == y;,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;<EOS>return (Double.isInfinite(x) && Double.isNaN(y)) || x == y;,1
patch1-Math-70-SketchFix-plausible.patch,if (fm * fmin > 0.0) {,if (fm * fmin > 0.0||i<0) {,if (fm * fmin > 0.0) {<EOS>if (fm * fmin > 0.0||i<0) {,1
patch1-Math-72-SimFix-plausible.patch,return arguments.clone();,return (pattern==null)?null:arguments.clone();,return arguments.clone();<EOS>return (pattern==null)?null:arguments.clone();,1
patch1-Math-73-Elixir-plausible.patch,"return solve(f, min, yMin, max, yMax, initial, yInitial);","return solve(f, min, yMin, max, yMax, solve(initial,initial), yInitial);","return solve(f, min, yMin, max, yMax, initial, yInitial);<EOS>return solve(f, min, yMin, max, yMax, solve(initial,initial), yInitial);",1
patch1-Math-73-SimFix-plausible.patch,"return solve(f, min, yMin, max, yMax, initial, yInitial);","return solve(f,min,initial);","return solve(f, min, yMin, max, yMax, initial, yInitial);<EOS>return solve(f,min,initial);",1
patch1-Math-78-Nopol2017.patch,if (x0 == x2) {,if (((1 < x2) && (!(y0 <= i))) || (x0 == x2)) {,if (x0 == x2) {<EOS>if (((1 < x2) && (!(y0 <= i))) || (x0 == x2)) {,1
patch1-Math-8-SimFix-plausible.patch,for (int i = 0; i < sampleSize; i++) {,for (int i = sampleSize; i < sampleSize; i++) {,for (int i = 0; i < sampleSize; i++) {<EOS>for (int i = sampleSize; i < sampleSize; i++) {,1
patch1-Math-80-CapGen-plausible.patch,for (int i = 0; i < j; i += 4) {,for (int i = 0; i < pingPong; i += 4) {,for (int i = 0; i < j; i += 4) {<EOS>for (int i = 0; i < pingPong; i += 4) {,1
patch1-Math-80-Elixir-plausible.patch,for (int i = 0; i < j; i += 4) {,for (int i = 0; i > j; i += 4) {,for (int i = 0; i < j; i += 4) {<EOS>for (int i = 0; i > j; i += 4) {,1
patch1-Math-80-SimFix-plausible.patch,for (int k = 0; k < 4; k += step) {,for (int k = 0; k < 0; k += step) {,for (int k = 0; k < 4; k += step) {<EOS>for (int k = 0; k < 0; k += step) {,1
patch1-Math-81-ACS-plausible.patch,if (end - start > 2) {,if (end - start > 2&&!(end - start>=(double)0.0)) {,if (end - start > 2) {<EOS>if (end - start > 2&&!(end - start>=(double)0.0)) {,1
patch1-Math-81-DeepRepair.patch,b2 = work[nn - 5] / work[nn - 7];,org.apache.commons.math.linear.EigenDecompositionImpl.this.splitTolerance = splitTolerance;,b2 = work[nn - 5] / work[nn - 7];<EOS>org.apache.commons.math.linear.EigenDecompositionImpl.this.splitTolerance = splitTolerance;,1
patch1-Math-81-SimFix-plausible.patch,if (work[np - 8] > b2 || work[np - 4] > b1) {,if(b2>0.0&&b2>b2*b1/(1+b2*b2)){,if (work[np - 8] > b2 || work[np - 4] > b1) {<EOS>if(b2>0.0&&b2>b2*b1/(1+b2*b2)){,1
patch1-Math-82-HDRepair.patch,if (ratio < minRatio) {,if (ratio <= minRatio) {,if (ratio < minRatio) {<EOS>if (ratio <= minRatio) {,1
patch1-Math-82-SimFix-plausible.patch,"if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {","if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {","if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {<EOS>if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {",1
patch1-Math-82-SketchFix-plausible.patch,"if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {","if (MathUtils.compareTo(entry, 0, entry) >= 0) {","if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {<EOS>if (MathUtils.compareTo(entry, 0, entry) >= 0) {",1
patch1-Math-84-JGenProg2017.patch,repaired[i] = 1.0;,isRepairMode = true;,repaired[i] = 1.0;<EOS>isRepairMode = true;,1
patch1-Math-85-CapGen-plausible.patch,if (fa * fb >= 0.0 ) {,if (fa * upperBound >= 0.0 ) {,if (fa * fb >= 0.0 ) {<EOS>if (fa * upperBound >= 0.0 ) {,1
patch1-Math-85-HDRepair.patch,if (fa * fb >= 0.0 ) {,if (fa / fb >= 0.0 ) {,if (fa * fb >= 0.0 ) {<EOS>if (fa / fb >= 0.0 ) {,1
patch1-Math-85-JGenProg2017.patch,return minRow;,return minRatioPositions.get(0);,return minRow;<EOS>return minRatioPositions.get(0);,1
patch1-Math-85-Nopol2017.patch,"lowerBound, upperBound, a, b, fa, fb);","lowerBound, upperBound, a, b, fa, fb);","lowerBound, upperBound, a, b, fa, fb);<EOS>lowerBound, upperBound, a, b, fa, fb);",1
patch1-Math-85-SimFix-plausible.patch,if (fa * fb >= 0.0 ) {,if(fa*upperBound>=0.0){,if (fa * fb >= 0.0 ) {<EOS>if(fa*upperBound>=0.0){,1
patch1-Math-88-SimFix-plausible.patch,if (ratio < minRatio) {,if (ratio <= minRatio) {,if (ratio < minRatio) {<EOS>if (ratio <= minRatio) {,1
patch1-Math-95-JGenProg2017.patch,double inverse  = 1 / FastMath.sqrt(x * x + z * z);,double inverse = 1 / (org.apache.commons.math3.util.FastMath.sqrt((((x) * (x)) + ((y) * (y)))));,double inverse  = 1 / FastMath.sqrt(x * x + z * z);<EOS>double inverse = 1 / (org.apache.commons.math3.util.FastMath.sqrt((((x) * (x)) + ((y) * (y)))));,1
patch1-Math-97-ACS-plausible.patch,if (sign >= 0) {,if (sign >= 0&&!(sign<=(double)0.546842)) {,if (sign >= 0) {<EOS>if (sign >= 0&&!(sign<=(double)0.546842)) {,1
patch10-Math-80-CapGen-plausible.patch,work[i + k] = work[j - k];,work[i + 3] = work[j - k];,work[i + k] = work[j - k];<EOS>work[i + 3] = work[j - k];,1
patch4-Math-2-JGenProg2017.patch,"x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));",f0 = f1;,"x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));<EOS>f0 = f1;",1
patch4-Math-20-JGenProg2017.patch,"return solve(f, min, yMin, max, yMax, initial, yInitial);","return solve(f, min, max);","return solve(f, min, yMin, max, yMax, initial, yInitial);<EOS>return solve(f, min, max);",1
patch4-Math-50-JGenProg2017.patch,work[i + k] = work[j - k];,tType = -6;,work[i + k] = work[j - k];<EOS>tType = -6;,1
patch4-Math-63-CapGen-plausible.patch,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,return (Double.isNaN(x) && Double.isNaN(org.apache.commons.math.util.MathUtils.TWO_PI)) || x == y;,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;<EOS>return (Double.isNaN(x) && Double.isNaN(org.apache.commons.math.util.MathUtils.TWO_PI)) || x == y;,1
patch4-Math-78-JGenProg2017.patch,return ret;,return 0.0;,return ret;<EOS>return 0.0;,1
patch4-Math-80-CapGen-plausible.patch,work[j - k] = tmp;,work[i + k] = tmp;,work[j - k] = tmp;<EOS>work[i + k] = tmp;,1
patch5-Math-63-CapGen-plausible.patch,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,return (Double.isNaN(x) && Double.isNaN(x >= 0.0 ? 1.0 : -1.0)) || x == y;,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;<EOS>return (Double.isNaN(x) && Double.isNaN(x >= 0.0 ? 1.0 : -1.0)) || x == y;,1
patch5-Math-78-JGenProg2017.patch,return ret;,ret = 0.5;,return ret;<EOS>ret = 0.5;,1
patch5-Math-80-CapGen-plausible.patch,work[i + k] = work[j - k];,work[j - k] = work[j - k];,work[i + k] = work[j - k];<EOS>work[j - k] = work[j - k];,1
patch5-Math-81-JGenProg2017.patch,"return getWrappedField().getMaximumValue(instant, values) + 1;",return -1;,"return getWrappedField().getMaximumValue(instant, values) + 1;<EOS>return -1;",1
patch5-Math-95-JGenProg2017.patch,"return getWrappedField().getMaximumValue(instant, values) + 1;",return getMinimumValue();,"return getWrappedField().getMaximumValue(instant, values) + 1;<EOS>return getMinimumValue();",1
patch2-Math-2-JGenProg2017.patch,--end;,signChangeIndex++;,--end;<EOS>signChangeIndex++;,1
patch2-Math-20-JGenProg2017.patch,entries.remove(index);,"entries.put(index, value);","entries.remove(index);<EOS>entries.put(index, value);",1
patch2-Math-28-JGenProg2017.patch,f0 = computeObjectiveValue(x0);,f0 = f1;,f0 = computeObjectiveValue(x0);<EOS>f0 = f1;,1
patch2-Math-40-JGenProg2017.patch,"return solve(min, max);","return solve(f, min, max);","return solve(min, max);<EOS>return solve(f, min, max);",1
patch2-Math-49-JGenProg2017.patch,"return solve(f, min, yMin, max, yMax, initial, yInitial);","return solve(f, min, initial);","return solve(f, min, yMin, max, yMax, initial, yInitial);<EOS>return solve(f, min, initial);",1
patch2-Math-5-CapGen-plausible.patch,if (c.isNaN) {,if (this.add(org.apache.commons.math3.complex.Complex.I).isNaN) {,if (c.isNaN) {<EOS>if (this.add(org.apache.commons.math3.complex.Complex.I).isNaN) {,1
patch2-Math-63-CapGen-plausible.patch,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,return x == y || x == y;,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;<EOS>return x == y || x == y;,1
patch2-Math-70-SketchFix-plausible.patch,if (fm * fmin > 0.0) {,if (fm * fmin > 0.0||fmin == fm) {,if (fm * fmin > 0.0) {<EOS>if (fm * fmin > 0.0||fmin == fm) {,1
patch2-Math-73-JGenProg2017.patch,"flipIfWarranted(n, 2);",computeGershgorinCircles();,"flipIfWarranted(n, 2);<EOS>computeGershgorinCircles();",1
patch2-Math-74-JGenProg2017.patch,double b1 = work[np - 2];,double b1 = (work[(nn - 5)]) / (work[(nn - 7)]);,double b1 = work[np - 2];<EOS>double b1 = (work[(nn - 5)]) / (work[(nn - 7)]);,1
patch2-Math-80-CapGen-plausible.patch,int j = 4 * n - 1;,int j = 4 * pingPong - 1;,int j = 4 * n - 1;<EOS>int j = 4 * pingPong - 1;,1
patch2-Math-80-JGenProg2017.patch,return ret;,return 1;,return ret;<EOS>return 1;,1
patch2-Math-82-SketchFix-plausible.patch,if (ratio < minRatio) {,if (ratio < minRatio&&ratio>=0) {,if (ratio < minRatio) {<EOS>if (ratio < minRatio&&ratio>=0) {,1
patch2-Math-85-CapGen-plausible.patch,if (fa * fb >= 0.0 ) {,if (fa * b >= 0.0 ) {,if (fa * fb >= 0.0 ) {<EOS>if (fa * b >= 0.0 ) {,1
patch2-Math-85-JGenProg2017.patch,minIndex = i;,minRatioPositions = new java.util.ArrayList<java.lang.Integer>();,minIndex = i;<EOS>minRatioPositions = new java.util.ArrayList<java.lang.Integer>();,1
patch3-Math-20-JGenProg2017.patch,"x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));",f0 = computeObjectiveValue(x0);,"x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));<EOS>f0 = computeObjectiveValue(x0);",1
patch3-Math-28-JGenProg2017.patch,"return solve(f, min, yMin, max, yMax, initial, yInitial);","return solve(f, initial, max);","return solve(f, min, yMin, max, yMax, initial, yInitial);<EOS>return solve(f, initial, max);",1
patch3-Math-5-CapGen-plausible.patch,if (c.isNaN) {,if (org.apache.commons.math3.complex.Complex.I.subtract(this).isNaN) {,if (c.isNaN) {<EOS>if (org.apache.commons.math3.complex.Complex.I.subtract(this).isNaN) {,1
patch3-Math-50-JGenProg2017.patch,"flipIfWarranted(n, 2);",java.util.Arrays.sort(realEigenvalues);,"flipIfWarranted(n, 2);<EOS>java.util.Arrays.sort(realEigenvalues);",1
patch3-Math-63-CapGen-plausible.patch,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,return x == 0.0 || x == y;,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;<EOS>return x == 0.0 || x == y;,1
patch3-Math-70-SketchFix-plausible.patch,if (fm * fmin > 0.0) {,if (i>=0) {,if (fm * fmin > 0.0) {<EOS>if (i>=0) {,1
patch3-Math-73-JGenProg2017.patch,b2 = work[nn - 5] / work[nn - 7];,tType = -11;,b2 = work[nn - 5] / work[nn - 7];<EOS>tType = -11;,1
patch3-Math-78-JGenProg2017.patch,return ret;,ret = 1.0;,return ret;<EOS>ret = 1.0;,1
patch3-Math-80-CapGen-plausible.patch,for (int i = 0; i < j; i += 4) {,for (int i = 0; i < 2 * (pingPong); i += 4) {,for (int i = 0; i < j; i += 4) {<EOS>for (int i = 0; i < 2 * (pingPong); i += 4) {,1
patch3-Math-81-JGenProg2017.patch,res[i] = (x[i] - boundaries[0][i]) / diff;,valueRange = 1.0;,res[i] = (x[i] - boundaries[0][i]) / diff;<EOS>valueRange = 1.0;,1
patch3-Math-82-SketchFix-plausible.patch,"if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {",if (false) {,"if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {<EOS>if (false) {",1
patch3-Math-85-CapGen-plausible.patch,if (fa * fb >= 0.0 ) {,if (((fa * fb) > 0.0) && (numIterations < maximumIterations) ) {,if (fa * fb >= 0.0 ) {<EOS>if (((fa * fb) > 0.0) && (numIterations < maximumIterations) ) {,1
patch6-Math-63-CapGen-plausible.patch,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,return (Double.isNaN(x) && Double.isNaN(x > 0.0 ? 1.0 : -1.0)) || x == y;,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;<EOS>return (Double.isNaN(x) && Double.isNaN(x > 0.0 ? 1.0 : -1.0)) || x == y;,1
patch6-Math-80-CapGen-plausible.patch,work[i + k] = work[j - k];,work[i + k] = work[i + k];,work[i + k] = work[j - k];<EOS>work[i + k] = work[i + k];,1
patch7-Math-63-CapGen-plausible.patch,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,return (Double.isNaN(x) && Double.isNaN(x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0)) || x == y;,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;<EOS>return (Double.isNaN(x) && Double.isNaN(x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0)) || x == y;,1
patch7-Math-80-CapGen-plausible.patch,int j = 4 * n - 1;,int j = 4 * 2 * (pingPong) - 1;,int j = 4 * n - 1;<EOS>int j = 4 * 2 * (pingPong) - 1;,1
patch8-Math-63-CapGen-plausible.patch,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;,return (Double.isNaN(org.apache.commons.math.util.MathUtils.TWO_PI) && Double.isNaN(y)) || x == y;,return (Double.isNaN(x) && Double.isNaN(y)) || x == y;<EOS>return (Double.isNaN(org.apache.commons.math.util.MathUtils.TWO_PI) && Double.isNaN(y)) || x == y;,1
patch8-Math-80-CapGen-plausible.patch,int j = 4 * n - 1;,int j = (4 * (n - 1)) + (pingPong);,int j = 4 * n - 1;<EOS>int j = (4 * (n - 1)) + (pingPong);,1
patch9-Math-80-CapGen-plausible.patch,work[i + k] = work[j - k];,work[i + 1] = work[j - k];,work[i + k] = work[j - k];<EOS>work[i + 1] = work[j - k];,1
patch-Math-30-ssFix-plausible.patch,final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;,final double VarU = (double) ((double) n1n2prod * (n1 + n2 + 1)) / 12.0;,final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;<EOS>final double VarU = (double) ((double) n1n2prod * (n1 + n2 + 1)) / 12.0;,1
patch-Math-79-ssFix-plausible.patch,final int dp = p1[i] - p2[i];,final double dp = p1[i] - p2[i];,final int dp = p1[i] - p2[i];<EOS>final double dp = p1[i] - p2[i];,1
patch1-Math-2-Cardumen.patch,if (!numericalVarianceIsCalculated) {,if (!((sampleSize) <= (numberOfSuccesses))) {,if (!numericalVarianceIsCalculated) {<EOS>if (!((sampleSize) <= (numberOfSuccesses))) {,1
patch2-Math-2-Cardumen.patch,Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);,final boolean chebyshevApplies = lower < lower;,Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);<EOS>final boolean chebyshevApplies = lower < lower;,1
patch3-Math-2-Cardumen.patch,if (!numericalVarianceIsCalculated) {,if ((sampleSize) > (numberOfSuccesses)) {,if (!numericalVarianceIsCalculated) {<EOS>if ((sampleSize) > (numberOfSuccesses)) {,1
patch4-Math-2-Cardumen.patch,Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);,,Double.isInfinite(sigma) || Double.isNaN(sigma) || sigma == 0.0);<EOS>,1
patch5-Math-2-Cardumen.patch,if (tmp < upper) {,if ((java.lang.Double.isInfinite(p)) || (java.lang.Double.isNaN(p))) {,if (tmp < upper) {<EOS>if ((java.lang.Double.isInfinite(p)) || (java.lang.Double.isNaN(p))) {,1
patch1-Math-5-Cardumen.patch,if (c.isNaN) {,if (isNaN) {,if (c.isNaN) {<EOS>if (isNaN) {,1
patch3-Math-5-Cardumen.patch,if (c.isNaN) {,if (((real) != (real)) || ((imaginary) != (imaginary))) {,if (c.isNaN) {<EOS>if (((real) != (real)) || ((imaginary) != (imaginary))) {,1
patch4-Math-5-Cardumen.patch,if (c.isNaN) {,if (((isNaN) && (isNaN)) || (((isNaN) || (isNaN)) && (!(isNaN)))) {,if (c.isNaN) {<EOS>if (((isNaN) && (isNaN)) || (((isNaN) || (isNaN)) && (!(isNaN)))) {,1
patch1-Math-6-Cardumen.patch,return iterations.getCount();,return evaluations.getCount();,return iterations.getCount();<EOS>return evaluations.getCount();,1
patch2-Math-6-Cardumen.patch,return iterations.getCount();,return evaluations.getMaximalCount();,return iterations.getCount();<EOS>return evaluations.getMaximalCount();,1
patch1-Math-8-Cardumen.patch,for (int i = 0; i < sampleSize; i++) {,for (int i = 0; (singletons.get(sampleSize)) == null; i++) {,for (int i = 0; i < sampleSize; i++) {<EOS>for (int i = 0; (singletons.get(sampleSize)) == null; i++) {,1
patch2-Math-8-Cardumen.patch,for (int i = 0; i < sampleSize; i++) {,for (int i = 0; sampleSize <= 0; i++) {,for (int i = 0; i < sampleSize; i++) {<EOS>for (int i = 0; sampleSize <= 0; i++) {,1
patch3-Math-8-Cardumen.patch,for (int i = 0; i < sampleSize; i++) {,for (int i = 0; sampleSize < sampleSize; i++) {,for (int i = 0; i < sampleSize; i++) {<EOS>for (int i = 0; sampleSize < sampleSize; i++) {,1
patch4-Math-8-Cardumen.patch,for (int i = 0; i < sampleSize; i++) {,for (int i = 0; (probabilities[0]) != 0.0; i++) {,for (int i = 0; i < sampleSize; i++) {<EOS>for (int i = 0; (probabilities[0]) != 0.0; i++) {,1
patch5-Math-8-Cardumen.patch,for (int i = 0; i < sampleSize; i++) {,for (int i = 0; sampleSize > 1; i++) {,for (int i = 0; i < sampleSize; i++) {<EOS>for (int i = 0; sampleSize > 1; i++) {,1
patch1-Math-20-Cardumen.patch,for (int i = 0; i < x.length; i++) {,for (int i = 0; (valueRange) > (valueRange); i++) {,for (int i = 0; i < x.length; i++) {<EOS>for (int i = 0; (valueRange) > (valueRange); i++) {,1
patch2-Math-20-Cardumen.patch,if (boundaries == null) {,if (x != null) {,if (boundaries == null) {<EOS>if (x != null) {,1
patch3-Math-20-Cardumen.patch,for (int i = 0; i < x.length; i++) {,for (int i = 0; res == null; i++) {,for (int i = 0; i < x.length; i++) {<EOS>for (int i = 0; res == null; i++) {,1
patch4-Math-20-Cardumen.patch,if (boundaries == null) {,"if (((java.lang.Math.max(valueRange, valueRange)) - (java.lang.Math.min(valueRange, valueRange))) < (valueRange)) {","if (boundaries == null) {<EOS>if (((java.lang.Math.max(valueRange, valueRange)) - (java.lang.Math.min(valueRange, valueRange))) < (valueRange)) {",1
patch5-Math-20-Cardumen.patch,if (boundaries == null) {,"if (((java.lang.Math.max(valueRange, valueRange)) - (java.lang.Math.min(valueRange, valueRange))) == 0) {","if (boundaries == null) {<EOS>if (((java.lang.Math.max(valueRange, valueRange)) - (java.lang.Math.min(valueRange, valueRange))) == 0) {",1
patch1-Math-30-Cardumen.patch,if (FastMath.abs(dev) > 40 * standardDeviation) {,if ((java.lang.Double.isNaN(SQRT2PI)) || (java.lang.Double.isNaN(x))) {,if (FastMath.abs(dev) > 40 * standardDeviation) {<EOS>if ((java.lang.Double.isNaN(SQRT2PI)) || (java.lang.Double.isNaN(x))) {,1
patch2-Math-30-Cardumen.patch,if (FastMath.abs(dev) > 40 * standardDeviation) {,if (x != x) {,if (FastMath.abs(dev) > 40 * standardDeviation) {<EOS>if (x != x) {,1
patch3-Math-30-Cardumen.patch,if (FastMath.abs(dev) > 40 * standardDeviation) {,if ((java.lang.Double.isNaN(mean)) || (java.lang.Double.isNaN(dev))) {,if (FastMath.abs(dev) > 40 * standardDeviation) {<EOS>if ((java.lang.Double.isNaN(mean)) || (java.lang.Double.isNaN(dev))) {,1
patch4-Math-30-Cardumen.patch,if (FastMath.abs(dev) > 40 * standardDeviation) {,if ((java.lang.Double.isNaN(SQRT2PI)) || (java.lang.Double.isNaN(dev))) {,if (FastMath.abs(dev) > 40 * standardDeviation) {<EOS>if ((java.lang.Double.isNaN(SQRT2PI)) || (java.lang.Double.isNaN(dev))) {,1
patch5-Math-30-Cardumen.patch,if (FastMath.abs(dev) > 40 * standardDeviation) {,if (java.lang.Double.isNaN(dev)) {,if (FastMath.abs(dev) > 40 * standardDeviation) {<EOS>if (java.lang.Double.isNaN(dev)) {,1
patch1-Math-32-Cardumen.patch,double inverse  = 1 / FastMath.sqrt(x * x + z * z);,double inverse = (x) * (x);,double inverse  = 1 / FastMath.sqrt(x * x + z * z);<EOS>double inverse = (x) * (x);,1
patch2-Math-32-Cardumen.patch,double inverse  = 1 / FastMath.sqrt(x * x + z * z);,"double inverse = org.apache.commons.math3.util.FastMath.max(x, x);","double inverse  = 1 / FastMath.sqrt(x * x + z * z);<EOS>double inverse = org.apache.commons.math3.util.FastMath.max(x, x);",1
patch1-Math-33-Cardumen.patch,"if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",if (entry >= (((1.5 * (epsilon)) * (epsilon)) - (org.apache.commons.math3.util.FastMath.abs((entry * (epsilon)))))) {,"if (Precision.compareTo(entry, 0d, maxUlps) > 0) {<EOS>if (entry >= (((1.5 * (epsilon)) * (epsilon)) - (org.apache.commons.math3.util.FastMath.abs((entry * (epsilon)))))) {",1
patch1-Math-40-Cardumen.patch,if (signChangeIndex - start >= end - signChangeIndex) {,if (2.0 >= (end - signChangeIndex)) {,if (signChangeIndex - start >= end - signChangeIndex) {<EOS>if (2.0 >= (end - signChangeIndex)) {,1
patch3-Math-40-Cardumen.patch,"System.arraycopy(x, start, x, 0, nbPoints);","java.lang.System.arraycopy(x, 1, x, 0, signChangeIndex);","System.arraycopy(x, start, x, 0, nbPoints);<EOS>java.lang.System.arraycopy(x, 1, x, 0, signChangeIndex);",1
patch5-Math-40-Cardumen.patch,for (int j = end - 1; j >= start; --j) {,for (int j = (maximalOrder) - 1; j >= start; --j) {,for (int j = end - 1; j >= start; --j) {<EOS>for (int j = (maximalOrder) - 1; j >= start; --j) {,1
patch1-Math-41-Cardumen.patch,} else if (length > 1) {,} else if ((length & 2) != 0) {,} else if (length > 1) {<EOS>} else if ((length & 2) != 0) {,1
patch2-Math-41-Cardumen.patch,} else if (length > 1) {,} else if ((length & 1) == 0) {,} else if (length > 1) {<EOS>} else if ((length & 1) == 0) {,1
patch3-Math-41-Cardumen.patch,if (length == 1) {,if ((length == 5) && (length != 0)) {,if (length == 1) {<EOS>if ((length == 5) && (length != 0)) {,1
patch4-Math-41-Cardumen.patch,if (length == 1) {,if (mean >= length) {,if (length == 1) {<EOS>if (mean >= length) {,1
patch1-Math-49-Cardumen.patch,if (!isDefaultValue(value)) {,if (!(entries.containsKey(virtualSize))) {,if (!isDefaultValue(value)) {<EOS>if (!(entries.containsKey(virtualSize))) {,1
patch3-Math-49-Cardumen.patch,if (!isDefaultValue(value)) {,if (!((entries) instanceof org.apache.commons.math.linear.RealVector)) {,if (!isDefaultValue(value)) {<EOS>if (!((entries) instanceof org.apache.commons.math.linear.RealVector)) {,1
patch4-Math-49-Cardumen.patch,if (!isDefaultValue(value)) {,if (!(isDefaultValue(epsilon))) {,if (!isDefaultValue(value)) {<EOS>if (!(isDefaultValue(epsilon))) {,1
patch1-Math-50-Cardumen.patch,if (x == x1) {,if ((org.apache.commons.math.util.FastMath.abs(f1)) <= ftol) {,if (x == x1) {<EOS>if ((org.apache.commons.math.util.FastMath.abs(f1)) <= ftol) {,1
patch2-Math-50-Cardumen.patch,if (x == x1) {,if (f0 < f1) {,if (x == x1) {<EOS>if (f0 < f1) {,1
patch3-Math-50-Cardumen.patch,if (x == x1) {,if (((x1 >= 0) && (x <= 0)) || ((x1 <= 0) && (x >= 0))) {,if (x == x1) {<EOS>if (((x1 >= 0) && (x <= 0)) || ((x1 <= 0) && (x >= 0))) {,1
patch1-Math-69-Cardumen.patch,if (x == 0.0) {,if ((degreesOfFreedom) > 100) {,if (x == 0.0) {<EOS>if ((degreesOfFreedom) > 100) {,1
patch2-Math-69-Cardumen.patch,if (x == 0.0) {,if (((degreesOfFreedom) > 100) || ((degreesOfFreedom) <= 0)) {,if (x == 0.0) {<EOS>if (((degreesOfFreedom) > 100) || ((degreesOfFreedom) <= 0)) {,1
patch2-Math-70-Cardumen.patch,"return solve(min, max);","return solve(f, defaultAbsoluteAccuracy, max);","return solve(min, max);<EOS>return solve(f, defaultAbsoluteAccuracy, max);",1
patch3-Math-70-Cardumen.patch,"return solve(min, max);","return solve(f, functionValueAccuracy, max);","return solve(min, max);<EOS>return solve(f, functionValueAccuracy, max);",1
patch4-Math-70-Cardumen.patch,"return solve(min, max);","return solve(f, defaultFunctionValueAccuracy, max);","return solve(min, max);<EOS>return solve(f, defaultFunctionValueAccuracy, max);",1
patch5-Math-70-Cardumen.patch,"return solve(min, max);","return solve(f, absoluteAccuracy, max);","return solve(min, max);<EOS>return solve(f, absoluteAccuracy, max);",1
patch1-Math-73-Cardumen.patch,"return solve(f, min, yMin, max, yMax, initial, yInitial);","return solve(min, min);","return solve(f, min, yMin, max, yMax, initial, yInitial);<EOS>return solve(min, min);",1
patch2-Math-73-Cardumen.patch,"return solve(f, min, yMin, max, yMax, initial, yInitial);","return solve(max, max);","return solve(f, min, yMin, max, yMax, initial, yInitial);<EOS>return solve(max, max);",1
patch3-Math-73-Cardumen.patch,"return solve(f, min, yMin, max, yMax, initial, yInitial);","return solve(functionValueAccuracy, functionValueAccuracy);","return solve(f, min, yMin, max, yMax, initial, yInitial);<EOS>return solve(functionValueAccuracy, functionValueAccuracy);",1
patch4-Math-73-Cardumen.patch,"return solve(f, min, yMin, max, yMax, initial, yInitial);","return solve(yMin, yMin);","return solve(f, min, yMin, max, yMax, initial, yInitial);<EOS>return solve(yMin, yMin);",1
patch5-Math-73-Cardumen.patch,"return solve(f, min, yMin, max, yMax, initial, yInitial);","return solve(initial, initial);","return solve(f, min, yMin, max, yMax, initial, yInitial);<EOS>return solve(initial, initial);",1
patch1-Math-78-Cardumen.patch,oldDelta = delta;,y1 = y1 + (0.5 * y1);,oldDelta = delta;<EOS>y1 = y1 + (0.5 * y1);,1
patch1-Math-80-Cardumen.patch,for (int i = 0; i < j; i += 4) {,for (int i = 0; (((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(n + 2)])) < (work[(n - 3)])) && (((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(n - 3)])) < (work[(n + 2)])); i += 4) {,for (int i = 0; i < j; i += 4) {<EOS>for (int i = 0; (((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(n + 2)])) < (work[(n - 3)])) && (((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(n - 3)])) < (work[(n + 2)])); i += 4) {,1
patch2-Math-80-Cardumen.patch,for (int k = 0; k < 4; k += step) {,for (int k = 0; j == ((pingPong) - 2); k += step) {,for (int k = 0; k < 4; k += step) {<EOS>for (int k = 0; j == ((pingPong) - 2); k += step) {,1
patch3-Math-80-Cardumen.patch,for (int i = 0; i < j; i += 4) {,for (int i = 0; (dN) != 0.0; i += 4) {,for (int i = 0; i < j; i += 4) {<EOS>for (int i = 0; (dN) != 0.0; i += 4) {,1
patch4-Math-80-Cardumen.patch,for (int k = 0; k < 4; k += step) {,for (int k = 0; ((((dMin) < 0.0) && ((dMin1) > 0.0)) && ((work[(((4 * j) - 5) - (pingPong))]) < ((org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE) * ((sigma) + (dN1))))) && ((java.lang.Math.abs(dN)) < ((org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE) * (sigma))); k += step) {,for (int k = 0; k < 4; k += step) {<EOS>for (int k = 0; ((((dMin) < 0.0) && ((dMin1) > 0.0)) && ((work[(((4 * j) - 5) - (pingPong))]) < ((org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE) * ((sigma) + (dN1))))) && ((java.lang.Math.abs(dN)) < ((org.apache.commons.math.linear.EigenDecompositionImpl.TOLERANCE) * (sigma))); k += step) {,1
patch5-Math-80-Cardumen.patch,for (int k = 0; k < 4; k += step) {,for (int k = 0; (tType) > 0; k += step) {,for (int k = 0; k < 4; k += step) {<EOS>for (int k = 0; (tType) > 0; k += step) {,1
patch1-Math-81-Cardumen.patch,if (end - start > 2) {,if (deflated > (pingPong)) {,if (end - start > 2) {<EOS>if (deflated > (pingPong)) {,1
patch2-Math-81-Cardumen.patch,if (work[np - 8] > b2 || work[np - 4] > b1) {,if ((tType) < end) {,if (work[np - 8] > b2 || work[np - 4] > b1) {<EOS>if ((tType) < end) {,1
patch3-Math-81-Cardumen.patch,if (dMin1 == dN1 && dMin2 == dN2) {,if ((transformer) == null) {,if (dMin1 == dN1 && dMin2 == dN2) {<EOS>if ((transformer) == null) {,1
patch4-Math-81-Cardumen.patch,if (dMin1 == dN1 && dMin2 == dN2) {,if ((dN2) > 0.0) {,if (dMin1 == dN1 && dMin2 == dN2) {<EOS>if ((dN2) > 0.0) {,1
patch5-Math-81-Cardumen.patch,if (end - start > 2) {,if (nn < (4 * (end - 3))) {,if (end - start > 2) {<EOS>if (nn < (4 * (end - 3))) {,1
patch1-Math-85-Cardumen.patch,if (fa * fb >= 0.0 ) {,if (maximumIterations <= 0) {,if (fa * fb >= 0.0 ) {<EOS>if (maximumIterations <= 0) {,1
patch2-Math-85-Cardumen.patch,if (fa * fb >= 0.0 ) {,if (initial > upperBound) {,if (fa * fb >= 0.0 ) {<EOS>if (initial > upperBound) {,1
patch3-Math-85-Cardumen.patch,if (fa * fb >= 0.0 ) {,if ((initial < lowerBound) || (initial > upperBound)) {,if (fa * fb >= 0.0 ) {<EOS>if ((initial < lowerBound) || (initial > upperBound)) {,1
patch4-Math-85-Cardumen.patch,if (fa * fb >= 0.0 ) {,if ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && ((a > lowerBound) || (b < upperBound))) {,if (fa * fb >= 0.0 ) {<EOS>if ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && ((a > lowerBound) || (b < upperBound))) {,1
patch5-Math-85-Cardumen.patch,if (fa * fb >= 0.0 ) {,if (((initial < lowerBound) || (initial > upperBound)) || (lowerBound >= upperBound)) {,if (fa * fb >= 0.0 ) {<EOS>if (((initial < lowerBound) || (initial > upperBound)) || (lowerBound >= upperBound)) {,1
patch-Math-2-reference.patch,return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();,return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());,return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();<EOS>return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());,0
patch-Math-5-reference.patch,return NaN;,return INF;,return NaN;<EOS>return INF;,0
patch-Math-6-reference.patch,"iterations = new Incrementor(0, new MaxIterCallback());","iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());","iterations = new Incrementor(0, new MaxIterCallback());<EOS>iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());",0
patch-Math-11-reference.patch,"return FastMath.pow(2 * FastMath.PI, -dim / 2) *","return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *","return FastMath.pow(2 * FastMath.PI, -dim / 2) *<EOS>return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *",0
patch-Math-26-reference.patch,if (a0 > overflow) {,if (FastMath.abs(a0) > overflow) {,if (a0 > overflow) {<EOS>if (FastMath.abs(a0) > overflow) {,0
patch-Math-2-reference.patch,return multiply(100).doubleValue();,return 100 * doubleValue();,return multiply(100).doubleValue();<EOS>return 100 * doubleValue();,0
patch-Math-2-reference.patch,if ((Boolean) tree.getAttribute()) {,if (tree.getCut() == null && (Boolean) tree.getAttribute()) {,if ((Boolean) tree.getAttribute()) {<EOS>if (tree.getCut() == null && (Boolean) tree.getAttribute()) {,0
patch-Math-2-reference.patch,for (int i = 0; i < weights.length; i++) {,for (int i = begin; i < begin + length; i++) {,for (int i = 0; i < weights.length; i++) {<EOS>for (int i = begin; i < begin + length; i++) {,0
patch-Math-2-reference.patch,Iterator iter = res.entries.iterator();,Iterator iter = entries.iterator();,Iterator iter = res.entries.iterator();<EOS>Iterator iter = entries.iterator();,0
patch-Math-2-reference.patch,"return optimize(f, goal, min, max, 0);","return optimize(f, goal, min, max, min + 0.5 * (max - min));","return optimize(f, goal, min, max, 0);<EOS>return optimize(f, goal, min, max, min + 0.5 * (max - min));",0
patch-Math-2-reference.patch,out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));,out[i][j] = 2 * tDistribution.cumulativeProbability(-t);,out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));<EOS>out[i][j] = 2 * tDistribution.cumulativeProbability(-t);,0
patch-Math-2-reference.patch," max += Math.max(max, Math.abs(a));","max = Math.max(max, Math.abs(a));"," max += Math.max(max, Math.abs(a));<EOS>max = Math.max(max, Math.abs(a));",0
patch-Math-91-reference.patch,double nOd = doubleValue();,long nOd = ((long) numerator) * object.denominator;,double nOd = doubleValue();<EOS>long nOd = ((long) numerator) * object.denominator;,0
patch-Math-94-reference.patch, if (u * v == 0) {,if ((u == 0) || (v == 0)) {, if (u * v == 0) {<EOS>if ((u == 0) || (v == 0)) {,0
patch-Math-98-reference.patch,final BigDecimal[] out = new BigDecimal[v.length];,final BigDecimal[] out = new BigDecimal[nRows];,final BigDecimal[] out = new BigDecimal[v.length];<EOS>final BigDecimal[] out = new BigDecimal[nRows];,0
patch-Math-104-reference.patch,private static final double DEFAULT_EPSILON = 10e-9;,private static final double DEFAULT_EPSILON = 10e-15;,private static final double DEFAULT_EPSILON = 10e-9;<EOS>private static final double DEFAULT_EPSILON = 10e-15;,0
patch-Math-105-reference.patch, return sumYY - sumXY * sumXY / sumXX;,"return Math.max(0d, sumYY - sumXY * sumXY / sumXX);"," return sumYY - sumXY * sumXY / sumXX;<EOS>return Math.max(0d, sumYY - sumXY * sumXY / sumXX);",0